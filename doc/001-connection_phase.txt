1.0 Wiadomość
==============================
Każda wiadomość zaczyna się od MESSAGE_DELIMETER_START i kończy się MESSAGE_DELIMETER_END. Zawartość między tymi delimeterami jest zwyczajnym tekstem z zamienionymi MESSAGE_DELIMETER_START i MESSAGE_DELIMETER_END na MESSAGE_DELIMETER_START_PLACEHOLDER i MESSAGE_DELIMETER_END_PLACEHOLDER.

Kiedy otrzymuję MESSAGE_DELIMETER_START tworzę nowy obiekt Message i:
  a) jeżeli dostałem MESSAGE_DELIMETER_END zamykam message i go wrzucam na kolejke do wykonania z przypisanym polączeniem
  b) po upływie MESSAGE_TIMEOUT wiadomość jest zamykana i usuwana
  c) dodaję zawartość nadchodzących danych do message.

1.1 Połączenie i logowanie
==============================
Klient uruchamia aplikacje i widzi okno logowania, wpisuje login i hasło i klika połącz.
Klient łączy się z serwerem i wysyła login, hasło oraz wersje klienta
Serwer:
  a) jeżeli ilość graczy wynosi maxymalna ilosć serwer wysyla komunikato o tym fakcie i zamyka połączenie
  b) jeżeli wersja klienta jest o kant dupy rozbić wyślij komunikat o tym fakcie wraz z wymaganą wersją klienta i zamknij połączenie
  c) jeżeli login i hasło są poprawne wysyła komunikat o statusie ingame i przechodzi do kroku 1.2
  d) jeżeli login i hasło są niepoprawne wysyłany jest komunikat o tym z prośbą ponownego połączenia, następuje rozłączenie
  e) klient nie wykonał wszystkiego w czasie AUTHORIZATION_TIMEOUT zostaje rozłączony
Klient
  a) otrzymuje informacje o maxymalnej ilosci graczy, wyswietla komunikat o tym fakcie, rozlacza i przechodzi do ekranu glownego
  b) otrzymuje informacje o chujowym kliencie wyświetla komunikat o tym fakcie z prośbą pobrania adekwatnej wersji
  c) otrzymuje informacje o poprawnym logowaniu i przechodzi do kroku 1.2
  d) musi ponownie wprowadzić login i hasło
  e) następuje rozłączenie


1.2 Wczytywanie świata itp
==============================
Serwer dokonał autoryzacji połączenia i szuka gracza o podanych danych i przypsuje mu następujące połączenie. Następnie sprawdza na której mapie był on ostatnio i wysyła jego współrzędne wraz id mapy, po czym spawnuje go na tej mapie.

Klient dostaje informacje o poprawnym logowaniu i zaczyna pingować serwer co 5 sekund.
Serwer oczekuje aby klient pingowal go co max. 40 sekund, jeżeli czas zostanie przekroczony połączenie jest zrywane, a gracz przestaje mieć je przypisane.

Klient dostaje informacje o mapie na której przebywa i jego pozycji. Otwiera on mape i ustawia się w danej pozycji. Gracz teraz może zaczynać się poruszać.

1.3 Server Loop
==============================
Świat aktualizuje się SERVER_UPDATE razy w ciągu sekundy. Przy każdej aktualizacji:
  Jeżeli jest w trybie debugowania i otrzymał sygnał do przeładowania:
    Zapisanie stanu playerów, npc i mobów
    Przeładowanie wszystkich plików i klas, npc itp
    Wczytanie stanu
  Sprawdzenie statusu połączenia
  Jeżeli jakiś gracz nie ma aktywnego połączenia jest usuwany z mapy.

1.4 Połączenie
==============================
Każde połączenie może być przypisane do gracza i mieć wiele wiadomości. Po połączenia gracz jest usuwany i wszystkie jego wiadomości. 
Kiedy sprawdzam status połączenia to:
  Jeżeli połączenie ma status timeout, jest usuwane.
  Jeżeli połączenie ma status unauthorized, jest usuwane.
  Jeżeli połączenie ma status finished, jest usuwane.
  Jeżeli połączenie ma status disconnected, jest usuwane.

Connection Flow
  idle > authorization > game > finished

